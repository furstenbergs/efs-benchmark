---

# roles/vpc/tasks/main.yml


# First task : creating the VPC.
# We are using the variables set in the vars.yml file.
# The module gives us back its result,
# which contains information about our new VPC.
# We register it in the variable aw_efs_benchmark.

- name:               Create VPC
  ec2_vpc_net:
    name:             "{{ vpc_name }}"
    cidr_block:       "{{ vpc_cidr_block }}"
    region:           "{{ aws_region }}"
    aws_access_key:   "{{ aws_access_key }}"
    aws_secret_key:   "{{ aws_secret_key }}"
    state:            "present"
  register: aws_efs_benchmark


# We now use the set_fact module
# to save the id of the VPC in a new variable.

- name:               Set VPC ID in variable
  set_fact:
    vpc_id:           "{{ aws_efs_benchmark.vpc.id }}"


# Creating our only Subnet in the VPC.
# A subnet needs to be located in an Availability Zone (or AZ) A.
# Again, we register the results in a variable for later.

- name:               Create Public Subnet
  ec2_vpc_subnet:
    state:            "present"
    vpc_id:           "{{ vpc_id }}"
    cidr:             "{{ public_subnet_1_cidr }}"
    az:               "{{ aws_region }}a"
    region:           "{{ aws_region }}"
    aws_access_key:   "{{ aws_access_key }}"
    aws_secret_key:   "{{ aws_secret_key }}"
    resource_tags:
      Name:           "Public Subnet"
  register: aws_efs_benchmark_public_subnet


# We save the id of the Public Subnet in a new variable.

- name:               Set Public Subnet ID in variable
  set_fact:
    public_subnet_id: "{{ aws_efs_benchmark_public_subnet.subnet.id }}"


# Every VPC needs at least one Internet Gateway.
# This component allows traffic between the VPC and the outside world and the bellow will create one.
## Again, we register the results in a variable for later.

- name:               Create Internet Gateway for VPC
  ec2_vpc_igw:
    vpc_id:           "{{ vpc_id }}"
    region:           "{{ aws_region }}"
    aws_access_key:   "{{ aws_access_key }}"
    aws_secret_key:   "{{ aws_secret_key }}"
    state:            "present"
  register: aws_efs_benchmark_igw


# We save the id of the Internet Gateway in a new variable.

- name:               Set Internet Gateway ID in variable
  set_fact:
    igw_id:           "{{ aws_efs_benchmark_igw.gateway_id }}"


# Now we set up a Route Table.
# We attach that Route Table to the Public Subnet.
# The route we create here defines the default routing
# of the table, directing requests to the Internet Gateway.
# We don't see it here, but the route table will also contain
# a route for resources inside the VPC, so that if we need
# to reach an internal resource, we don't go to the Internet
# Gateway and this will be the case work to test EFS because it can be only accessed from withtin the VPC so we treate as local traffic.
# Again, we register the results in a variable for later.

- name:               Set up public subnet route table
  ec2_vpc_route_table:
    vpc_id:           "{{ vpc_id }}"
    region:           "{{ aws_region }}"
    aws_access_key:   "{{ aws_access_key }}"
    aws_secret_key:   "{{ aws_secret_key }}"
    tags:
      Name:           "Public"
    subnets:
      - "{{ public_subnet_id }}"
    routes:
      - dest:         "0.0.0.0/0"
        gateway_id:   "{{ aws_efs_benchmark_igw.gateway_id }}"


# Finally, we create our Main Security Group.
# Basically the idea here is to allow all access for this temp emviroemnt.
# Again, we register the results in a variable for later.

- name:               Create Main Security Group for aws efs benchmark
  ec2_group:
    name:             "My Security Group"
    description:      "My Security Group"
    vpc_id:           "{{ vpc_id }}"
    region:           "{{ aws_region }}"
    aws_access_key:   "{{ aws_access_key }}"
    aws_secret_key:   "{{ aws_secret_key }}"
    rules:
      - proto:        all
        from_port:    "1"
        to_port:      "65535"
        cidr_ip:      "0.0.0.0/0"
  register: aws_efs_benchmark_sg


# We save Security Group as a vairable

- name:               Security Group variable
  set_fact:
    sg_id:           "{{ aws_efs_benchmark_sg.group_id }}"
